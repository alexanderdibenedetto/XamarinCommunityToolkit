// <auto-generated/>
// Marking this with the auto generated tag to overrule the code styling violations




using Microsoft.Maui;
using Microsoft.Maui.Controls;
using Microsoft.Maui.Graphics;
using Xamarin.CommunityToolkit.Markup.MauiCompat;

namespace Xamarin.CommunityToolkit.Sample
{
	public static class Styles
	{
		static Style<Span> link;
		static Style<Button> headerButton;

		public static Style<Span> Link => link ??= new Style<Span>(
			(Span.FontSizeProperty, 14),
			(Span.TextColorProperty, Colors.CornflowerBlue),
			(Span.TextDecorationsProperty, TextDecorations.Underline)
		);

		public static Style<Button> HeaderButton => headerButton ??= new Style<Button>(
			(Button.TextColorProperty, Colors.CornflowerBlue),
			(Button.FontSizeProperty, 24)
		).BasedOn(Implicit.Buttons);

		public static class Implicit
		{
			static ResourceDictionary dictionary;
			static Style<Button> buttons;
			static Style<ImageButton> imageButtons;
			static Style<Label> labels;
			static Style<Entry> entries;

			public static ResourceDictionary Dictionary => dictionary ??= new ResourceDictionary { Labels, Entries };

			public static Style<Label> Labels => labels ??= new Style<Label>(
				(Label.TextColorProperty, Colors.White)
			);

			public static Style<Button> Buttons => buttons ??= new Style<Button>(
				(Button.BackgroundColorProperty, Colors.Transparent)
			);

			public static Style<ImageButton> ImageButtons => imageButtons ??= new Style<ImageButton>(
				(Button.BackgroundColorProperty, Colors.Transparent)
			);

			public static Style<Entry> Entries => entries ??= new Style<Entry>(
				(Entry.TextColorProperty, Colors.White),
				(Entry.BackgroundColorProperty, Colors.Transparent)
			);
		}
	}
}
